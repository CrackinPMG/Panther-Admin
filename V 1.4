repeat task.wait() until game:IsLoaded()

local PantherAdmin_UI = Instance.new("ScreenGui")
PantherAdmin_UI.Name = "PantherAdmin_UI"
PantherAdmin_UI.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local API = {}

local MainFrame = Instance.new("ImageLabel")
MainFrame.Image = "rbxassetid://18610728562"
MainFrame.Name = "MainFrame"
MainFrame.Parent = PantherAdmin_UI
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.Size = UDim2.new(0, 350, 0, 450)
MainFrame.Position = UDim2.new(0.5, -175, 0.5, -225)
MainFrame.Active = true
MainFrame.Draggable = true

local MainFrameCorner = Instance.new("UICorner")
MainFrameCorner.CornerRadius = UDim.new(0, 12)
MainFrameCorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Parent = MainFrame
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)

local TitleBarCorner = Instance.new("UICorner")
TitleBarCorner.CornerRadius = UDim.new(0, 12)
TitleBarCorner.Parent = TitleBar

local TitleLabel = Instance.new("TextLabel")
TitleBar.BackgroundTransparency = 0.2
TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = TitleBar
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(1, -80, 1, 0)
TitleLabel.Position = UDim2.new(0, 36, 0, 0)
TitleLabel.Text = "Panther Admin"
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.TextScaled = false
TitleLabel.TextSize = 14
TitleLabel.TextColor3 = Color3.fromRGB(240, 240, 240)

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = TitleBar
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -70, 0, 5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.Text = "–"
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextScaled = true
MinimizeButton.TextColor3 = Color3.fromRGB(240, 240, 240)
local MinimizeButtonCorner = Instance.new("UICorner")
MinimizeButtonCorner.CornerRadius = UDim.new(0, 6)
MinimizeButtonCorner.Parent = MinimizeButton

local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -35, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
CloseButton.Text = "×"
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextScaled = true
CloseButton.TextColor3 = Color3.fromRGB(240, 240, 240)
local CloseButtonCorner = Instance.new("UICorner")
CloseButtonCorner.CornerRadius = UDim.new(0, 6)
CloseButtonCorner.Parent = CloseButton

local SearchBar = Instance.new("TextBox")
SearchBar.Name = "SearchBar"
SearchBar.Parent = MainFrame
SearchBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SearchBar.BackgroundTransparency = 1
SearchBar.BorderSizePixel = 0
SearchBar.Position = UDim2.new(0, 10, 0, 45)
SearchBar.Size = UDim2.new(0, 330, 0, 25)
SearchBar.Font = Enum.Font.SourceSans
SearchBar.PlaceholderText = "Search commands..."
SearchBar.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
SearchBar.Text = ""
SearchBar.TextColor3 = Color3.fromRGB(240, 240, 240)
SearchBar.TextSize = 14

local CommandsList = Instance.new("ScrollingFrame")
CommandsList.Name = "CommandsList"
CommandsList.Parent = MainFrame
CommandsList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
CommandsList.BackgroundTransparency = 1
CommandsList.Position = UDim2.new(0, 10, 0, 80)
CommandsList.Size = UDim2.new(1, -20, 0, 260)
CommandsList.ScrollBarThickness = 6
CommandsList.AutomaticCanvasSize = Enum.AutomaticSize.Y
local CommandsListCorner = Instance.new("UICorner")
CommandsListCorner.CornerRadius = UDim.new(0, 8)
CommandsListCorner.Parent = CommandsList

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = CommandsList
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 6)

local CommandBar = Instance.new("TextBox")
CommandBar.Name = "CommandBar"
CommandBar.Parent = MainFrame
CommandBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
CommandBar.Size = UDim2.new(1, -20, 0, 30)
CommandBar.Position = UDim2.new(0, 10, 1, -40)
CommandBar.Font = Enum.Font.SourceSans
CommandBar.PlaceholderText = "Execute command..."
CommandBar.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
CommandBar.Text = ""
CommandBar.TextColor3 = Color3.fromRGB(240, 240, 240)
CommandBar.TextSize = 16
CommandBar.ClearTextOnFocus = false
CommandBar.BackgroundTransparency = 0.6
local CommandBarCorner = Instance.new("UICorner")
CommandBarCorner.CornerRadius = UDim.new(0, 8)
CommandBarCorner.Parent = CommandBar

local DescriptionTextBox = Instance.new("TextLabel")
DescriptionTextBox.Name = "DescriptionTextBox"
DescriptionTextBox.Parent = MainFrame
DescriptionTextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DescriptionTextBox.BackgroundTransparency = 1
DescriptionTextBox.BorderSizePixel = 0
DescriptionTextBox.Position = UDim2.new(0, 10, 0, 375)
DescriptionTextBox.Size = UDim2.new(0, 330, 0, 27)
DescriptionTextBox.Visible = false
DescriptionTextBox.Font = Enum.Font.SourceSans
DescriptionTextBox.Text = ""
DescriptionTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
DescriptionTextBox.TextSize = 14
DescriptionTextBox.TextStrokeTransparency = 0.65

local Commands = {}


function API:AddCommand(header, description, commandFunction, isHidden, extra, isPre, doNotLower, aliases, extraText)
    local CommandLabel = Instance.new("TextButton")
    CommandLabel.Name = header
    CommandLabel.Parent = isHidden and nil or CommandsList
    CommandLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    CommandLabel.Size = UDim2.new(1, 0, 0, 30)
    CommandLabel.Font = Enum.Font.SourceSans
    CommandLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
    CommandLabel.TextSize = 16
    CommandLabel.BackgroundTransparency = 0.4

    local CommandLabelCorner = Instance.new("UICorner")
    CommandLabelCorner.CornerRadius = UDim.new(0, 8)
    CommandLabelCorner.Parent = CommandLabel

    if isPre then
        CommandLabel.TextColor3 = Color3.new(1, 0.796, 0.066)
    end

    Commands[doNotLower and header or header:lower()] = commandFunction

    -- Store aliases
    if aliases then
        for _, alias in pairs(aliases) do
            Commands[doNotLower and alias or alias:lower()] = commandFunction
        end
    end

    -- Format alias text using "/" instead of ","
    local aliasText = aliases and (" / " .. table.concat(aliases, " / ")) or ""
    CommandLabel.Text = header .. aliasText .. (extraText and (" " .. extraText) or "")

    CommandLabel.MouseButton1Click:Connect(function()
        CommandBar.Text = header
        CommandBar:CaptureFocus()
    end)

    CommandLabel.MouseEnter:Connect(function()
        CommandLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        DescriptionTextBox.Text = description
        DescriptionTextBox.Visible = true
    end)

    CommandLabel.MouseLeave:Connect(function()
        CommandLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        DescriptionTextBox.Visible = false
    end)

    local function ExecuteCommand(text)
        local splitText = doNotLower and text:split(" ") or text:lower():split(" ")
        local commandKey = splitText[1]:lower()
        local args = {}
        for i = 2, #splitText do
            table.insert(args, splitText[i])
        end
        if Commands[commandKey] then
            local success, errorMessage = pcall(function()
                Commands[commandKey](args)
            end)
            if not success and errorMessage then
                warn("ERROR: " .. tostring(errorMessage))
            end
        else
            warn("Unknown command: " .. commandKey)
        end
    end

    CommandBar.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            ExecuteCommand(CommandBar.Text)
            task.wait(0.04)
            CommandBar.Text = ""
        end
    end)
end

CommandBar.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local cmd = CommandBar.Text:lower()
        if Commands[cmd] then
            pcall(Commands[cmd], {})
        end
        CommandBar.Text = ""
    end
end)

SearchBar.Changed:Connect(function(property)
    if property:lower() == "text" then
        CommandsList.CanvasPosition = Vector2.new(0, 0)
        if #SearchBar.Text > 0 then
            for _, v in pairs(CommandsList:GetChildren()) do
                if v:IsA("TextButton") then
                    v.Visible = string.find(string.lower(v.Text), string.lower(SearchBar.Text)) ~= nil
                end
            end
        else
            for _, v in pairs(CommandsList:GetChildren()) do
                if v:IsA("TextButton") then
                    v.Visible = true
                end
            end
        end
    end
end)

MinimizeButton.MouseButton1Click:Connect(function()
    local isMinimized = MainFrame.Size.Y.Offset <= 40
    MainFrame:TweenSize(UDim2.new(0, 350, 0, isMinimized and 450 or 40), "Out", "Quad", 0, true)
    CommandBar.Visible = isMinimized
    SearchBar.Visible = isMinimized
    CommandsList.Visible = isMinimized
end)

CloseButton.MouseButton1Click:Connect(function()
    PantherAdmin_UI:Destroy()
end)

function API:MoveTo(targetCFrame)
    local Player = game:GetService("Players").LocalPlayer.Character
    if not Player or not Player:FindFirstChild("HumanoidRootPart") then return end

    local currentRotation = Player.HumanoidRootPart.CFrame.Rotation -- Extract rotation only

    for i = 1, 3 do
        Player:WaitForChild("Humanoid").Sit = false
        Player:SetPrimaryPartCFrame(targetCFrame * currentRotation) -- Maintain rotation
        game:GetService("RunService").Stepped:Wait()
    end
end

-- Criminal Base Teleport Command
API:AddCommand("crimbase", "Teleports you to the criminal base", function(args)
	API:MoveTo(CFrame.new(-860.533, 95.476, 2099.548))
end, false, nil, nil, nil, {"base", "cb"})

API:AddCommand("nspawn", "Teleports you to the neutral spawn", function(args)
	API:MoveTo(CFrame.new(879, 29, 2349))
end, false, nil, nil, nil, nil)

API:AddCommand("office", "Teleports you to the secret office", function(args)
	API:MoveTo(CFrame.new(700, 101, 2357))
end, false, nil, nil, nil, nil)

API:AddCommand("tunnel", "Teleports you to the tunnel", function(args)
	API:MoveTo(CFrame.new(527, 90, 2575))
end, false, nil, nil, nil, {"tunl", "tnl"})

API:AddCommand("fridge", "Teleports you to the refrigerator", function(args)
	local Player = game:GetService("Players").LocalPlayer.Character
    if not Player or not Player:FindFirstChild("HumanoidRootPart") then return end

    for i = 1, 3 do
        Player:WaitForChild("Humanoid").Sit = false
        Player:SetPrimaryPartCFrame(CFrame.new(787, 102, 2250.5))
        game:GetService("RunService").Stepped:Wait()
    end
end, false, nil, nil, nil, {"freezer"})

-- GoTo Command with Aliases and Random Player Teleport
API:AddCommand("goto", "Teleports to a player", function(args)
    if not args[1] then return end
    local targetName = args[1]:lower()
    local targetPlayer = nil

        -- Search for a player with a matching name
        for _, player in pairs(game.Players:GetPlayers()) do
            if string.lower(player.Name):sub(1, #targetName) == targetName 
            or string.lower(player.DisplayName):sub(1, #targetName) == targetName then
                targetPlayer = player
                break
            end
        end

    -- Teleport if the player is found
    if targetPlayer and targetPlayer.Character and targetPlayer.Character.PrimaryPart then
        local Player = game.Players.LocalPlayer
        local Amount = 3

        if Player.PlayerGui:FindFirstChild("Home") and 
           Player.PlayerGui.Home:FindFirstChild("hud") and
           Player.PlayerGui.Home.hud:FindFirstChild("Topbar") and
           Player.PlayerGui.Home.hud.Topbar:FindFirstChild("titleBar") and
           Player.PlayerGui.Home.hud.Topbar.titleBar:FindFirstChild("Title") then

            local titleText = Player.PlayerGui.Home.hud.Topbar.titleBar.Title.Text:lower()
            if titleText == "lights out" or titleText == "lightsout" then
                Amount = 5
            end
        end

        for i = 1, Amount do
            Player.Character:WaitForChild("Humanoid").Sit = false
            Player.Character:WaitForChild("HumanoidRootPart").CFrame = 
                targetPlayer.Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(0, 3, 2.5)
            game:GetService("RunService").Stepped:Wait()
        end
    else
        print("Error: Player not found or character invalid.")
    end
end, false, nil, nil, nil, {"to"}, "[player]")

function API:Bring(Target, TeleportTo)
    if not TeleportTo then
        TeleportTo = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
    end
    local CarSelected = nil
    local Seat = nil
    local Attempts = 0
    
    for i, v in pairs(game:GetService("Workspace").CarContainer:GetChildren()) do
        if v then
            if v:WaitForChild("Body"):WaitForChild("VehicleSeat").Occupant == nil then
                CarSelected = v
            end
        end
    end

    if not CarSelected then
        coroutine.wrap(function()
            if not CarSelected then
                CarSelected = game:GetService("Workspace").CarContainer.ChildAdded:Wait()
            end
        end)()

        game:GetService("Players").LocalPlayer.Character:SetPrimaryPartCFrame(game:GetService("Workspace").Prison_ITEMS.buttons:GetChildren()[7]["Car Spawner"].CFrame * CFrame.new(0, 0.5, 0))
        wait(0.23)

        repeat task.wait()
            task.spawn(function()
                workspace.Remote.ItemHandler:InvokeServer(game:GetService("Workspace").Prison_ITEMS.buttons:GetChildren()[7]["Car Spawner"])
            end)
        until CarSelected
    end

    repeat game:GetService("RunService").RenderStepped:Wait() until CarSelected ~= nil

    if CarSelected then
        CarSelected:WaitForChild("Body"):WaitForChild("VehicleSeat")
        CarSelected.PrimaryPart = CarSelected.Body.VehicleSeat
        Seat = CarSelected.Body.VehicleSeat
        CarSelected:SetPrimaryPartCFrame(game:GetService("Players").LocalPlayer.Character:GetPrimaryPartCFrame())
        
        repeat task.wait()
            Seat:Sit(game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"))
        until game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit == true

        repeat game:GetService("RunService").RenderStepped:Wait()
            Attempts = Attempts + 1
            if not Target.Character or Target.Character:FindFirstChildOfClass("Humanoid").Health < 1 then
                break
            end
            CarSelected:SetPrimaryPartCFrame(Target.Character:GetPrimaryPartCFrame() * CFrame.new(0, -3, -5))
        until Target.Character:FindFirstChildOfClass("Humanoid").Sit == true or Attempts > 500

        for i = 1, 10 do
            CarSelected:SetPrimaryPartCFrame(TeleportTo)
	    game:GetService("RunService").Stepped:Wait()
        end
    end
end

API:AddCommand("bring", "Brings a player to you", function(args)
    if not args[1] then return end
local targetName = args[1]:lower()
local targetPlayer = nil

    for _, player in pairs(game.Players:GetPlayers()) do
        if string.lower(player.Name):sub(1, #targetName) == targetName 
        or string.lower(player.DisplayName):sub(1, #targetName) == targetName then
            targetPlayer = player
            break
        end
    end

if targetPlayer and targetPlayer.Character and targetPlayer.Character.PrimaryPart then
    local TeleportTo = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
    API:Bring(targetPlayer, TeleportTo)
else
    print("Error: Player not found or character invalid.")
end
end, false, nil, nil, nil, {"tp"}, "[player]")

API:AddCommand("spampunch", "You can spam the punch button", function(args)
	local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local animationToggle = false
local holdingF = false

local function doPunch(speed)
	local character = LocalPlayer.Character
	if character and character:FindFirstChild("Humanoid") then
		local fightLeftAnimation = character.ClientInputHandler.fight_left
		local fightRightAnimation = character.ClientInputHandler.fight_right
		local punchSound = character.Head.punchSound
		local humanoid = character:FindFirstChild("Humanoid")
		local animator = humanoid:FindFirstChild("Animator")
		if animator then
			local animation = animationToggle and fightRightAnimation or fightLeftAnimation
			local track = animator:LoadAnimation(animation)
			track:Play()
			track:AdjustSpeed(speed)
			animationToggle = not animationToggle
		end
		local hit = false
		local primaryPart = character.PrimaryPart
		if primaryPart then
			local connection = primaryPart.Touched:Connect(function(otherPart)
				local otherCharacter = otherPart.Parent
				if otherCharacter and otherCharacter ~= character and otherCharacter:FindFirstChildOfClass("Humanoid") and not hit then
					local targetPlayer = Players:GetPlayerFromCharacter(otherCharacter)
					if targetPlayer then
						hit = true
						ReplicatedStorage.meleeEvent:FireServer(targetPlayer)
						ReplicatedStorage.SoundEvent:FireServer(punchSound, character.Head)
						punchSound:Play()
						connection:Disconnect()
					end
				end
			end)
			delay(0.03, function()
				if connection and connection.Connected then
					connection:Disconnect()
				end
			end)
			if not hit then
				for _, player in pairs(Players:GetPlayers()) do
					if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Humanoid") then
						local targetPrimary = player.Character.PrimaryPart
						if targetPrimary and (targetPrimary.Position - primaryPart.Position).Magnitude <= 4 then
							hit = true
							ReplicatedStorage.meleeEvent:FireServer(player)
							ReplicatedStorage.SoundEvent:FireServer(punchSound, character.Head)
							punchSound:Play()
							break
						end
					end
				end
			end
		end
	end
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if gameProcessedEvent then return end
	if input.KeyCode == Enum.KeyCode.F and not holdingF then
		holdingF = true
		doPunch(1.1)
		task.wait(0.1)
		if holdingF then
			while holdingF do
				doPunch(5)
				task.wait(0.03)
			end
		end
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.F then
		holdingF = false
	end
end)

end, false, nil, nil, nil, {"spunch", "fastpunch"})

API:AddCommand("jerk", "Start fucking yourself", function(args)
	workspace.Remote.ItemHandler:InvokeServer({Position=game:GetService("Players").LocalPlayer.Character.Head.Position,Parent=workspace.Prison_ITEMS.giver["AK-47"]})
	workspace.Remote.ItemHandler:InvokeServer({Position=game:GetService("Players").LocalPlayer.Character.Head.Position,Parent=workspace.Prison_ITEMS.giver["M9"]})
	workspace.Remote.ItemHandler:InvokeServer({Position=game:GetService("Players").LocalPlayer.Character.Head.Position,Parent=workspace.Prison_ITEMS.giver["Remington 870"]})
	wait(1)
	local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local character = Player.Character
local humanoid = character and character:FindFirstChild("Humanoid")
local animator = humanoid and humanoid:FindFirstChild("Animator")

for i,v in pairs(Player.Character:GetChildren()) do
				if v:IsA("Tool") then
					v.Parent = Player.Backpack
				end
			end
			Player.Backpack.M9.Parent = Player.Character
			Player.Backpack["AK-47"].Parent = Player.Character
			Player.Backpack["Remington 870"].Parent = Player.Character
			wait()
			Player.Character.M9.GripPos = Vector3.new(0.9, 2, 0)
			Player.Character["Remington 870"].GripPos = Vector3.new(0.9, 2, 2.1)
			Player.Character["AK-47"].GripPos = Vector3.new(0.9, 2, 6.4)
			wait()
			for i,v in pairs(Player.Character:GetChildren()) do
				if v:IsA("Tool") then
					v.Parent = Player.Backpack
				end
			end
			wait()
			Player.Backpack.M9.Parent = Player.Character
			Player.Backpack["AK-47"].Parent = Player.Character
			Player.Backpack["Remington 870"].Parent = Player.Character

if animator then
	while wait(0.1) do
    local jerkOff = game:GetService("ReplicatedStorage").Tools["Crude Knife"].Handle.Animation
    local track = animator:LoadAnimation(jerkOff)
    track:Play()
    track:AdjustSpeed(3)
	end
end
end, false, nil, nil, nil, {"masturbate"})
