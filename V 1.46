repeat task.wait() until game:IsLoaded()

local PantherAdmin_UI = Instance.new("ScreenGui")
PantherAdmin_UI.Name = "PantherAdmin_UI"
PantherAdmin_UI.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local API = {}

local MainFrame = Instance.new("ImageLabel")
MainFrame.Image = "rbxassetid://18610728562"
MainFrame.Name = "MainFrame"
MainFrame.Parent = PantherAdmin_UI
MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
MainFrame.Size = UDim2.new(0, 350, 0, 450)
MainFrame.Position = UDim2.new(0.5, -175, 0.5, -225)
MainFrame.Active = true
MainFrame.Draggable = true

local MainFrameCorner = Instance.new("UICorner")
MainFrameCorner.CornerRadius = UDim.new(0, 12)
MainFrameCorner.Parent = MainFrame

local TitleBar = Instance.new("Frame")
TitleBar.Name = "TitleBar"
TitleBar.Parent = MainFrame
TitleBar.Size = UDim2.new(1, 0, 0, 40)
TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)

local TitleBarCorner = Instance.new("UICorner")
TitleBarCorner.CornerRadius = UDim.new(0, 12)
TitleBarCorner.Parent = TitleBar

local TitleLabel = Instance.new("TextLabel")
TitleBar.BackgroundTransparency = 0.2
TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = TitleBar
TitleLabel.BackgroundTransparency = 1
TitleLabel.Size = UDim2.new(1, -80, 1, 0)
TitleLabel.Position = UDim2.new(0, 36, 0, 0)
TitleLabel.Text = "Panther Admin"
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.TextScaled = false
TitleLabel.TextSize = 14
TitleLabel.TextColor3 = Color3.fromRGB(240, 240, 240)

local MinimizeButton = Instance.new("TextButton")
MinimizeButton.Name = "MinimizeButton"
MinimizeButton.Parent = TitleBar
MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
MinimizeButton.Position = UDim2.new(1, -70, 0, 5)
MinimizeButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MinimizeButton.Text = "–"
MinimizeButton.Font = Enum.Font.GothamBold
MinimizeButton.TextScaled = true
MinimizeButton.TextColor3 = Color3.fromRGB(240, 240, 240)
local MinimizeButtonCorner = Instance.new("UICorner")
MinimizeButtonCorner.CornerRadius = UDim.new(0, 6)
MinimizeButtonCorner.Parent = MinimizeButton

local CloseButton = Instance.new("TextButton")
CloseButton.Name = "CloseButton"
CloseButton.Parent = TitleBar
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Position = UDim2.new(1, -35, 0, 5)
CloseButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
CloseButton.Text = "×"
CloseButton.Font = Enum.Font.GothamBold
CloseButton.TextScaled = true
CloseButton.TextColor3 = Color3.fromRGB(240, 240, 240)
local CloseButtonCorner = Instance.new("UICorner")
CloseButtonCorner.CornerRadius = UDim.new(0, 6)
CloseButtonCorner.Parent = CloseButton

local SearchBar = Instance.new("TextBox")
SearchBar.Name = "SearchBar"
SearchBar.Parent = MainFrame
SearchBar.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SearchBar.BackgroundTransparency = 1
SearchBar.BorderSizePixel = 0
SearchBar.Position = UDim2.new(0, 10, 0, 45)
SearchBar.Size = UDim2.new(0, 330, 0, 25)
SearchBar.Font = Enum.Font.SourceSans
SearchBar.PlaceholderText = "Search commands..."
SearchBar.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
SearchBar.Text = ""
SearchBar.TextColor3 = Color3.fromRGB(240, 240, 240)
SearchBar.TextSize = 14

local CommandsList = Instance.new("ScrollingFrame")
CommandsList.Name = "CommandsList"
CommandsList.Parent = MainFrame
CommandsList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
CommandsList.BackgroundTransparency = 1
CommandsList.Position = UDim2.new(0, 10, 0, 80)
CommandsList.Size = UDim2.new(1, -20, 0, 260)
CommandsList.ScrollBarThickness = 6
CommandsList.AutomaticCanvasSize = Enum.AutomaticSize.Y
local CommandsListCorner = Instance.new("UICorner")
CommandsListCorner.CornerRadius = UDim.new(0, 8)
CommandsListCorner.Parent = CommandsList

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Parent = CommandsList
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.Padding = UDim.new(0, 6)

local CommandBar = Instance.new("TextBox")
CommandBar.Name = "CommandBar"
CommandBar.Parent = MainFrame
CommandBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
CommandBar.Size = UDim2.new(1, -20, 0, 30)
CommandBar.Position = UDim2.new(0, 10, 1, -40)
CommandBar.Font = Enum.Font.SourceSans
CommandBar.PlaceholderText = "Execute command..."
CommandBar.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
CommandBar.Text = ""
CommandBar.TextColor3 = Color3.fromRGB(240, 240, 240)
CommandBar.TextSize = 16
CommandBar.ClearTextOnFocus = false
CommandBar.BackgroundTransparency = 0.6
local CommandBarCorner = Instance.new("UICorner")
CommandBarCorner.CornerRadius = UDim.new(0, 8)
CommandBarCorner.Parent = CommandBar

local DescriptionTextBox = Instance.new("TextLabel")
DescriptionTextBox.Name = "DescriptionTextBox"
DescriptionTextBox.Parent = MainFrame
DescriptionTextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
DescriptionTextBox.BackgroundTransparency = 1
DescriptionTextBox.BorderSizePixel = 0
DescriptionTextBox.Position = UDim2.new(0, 10, 0, 375)
DescriptionTextBox.Size = UDim2.new(0, 330, 0, 27)
DescriptionTextBox.Visible = false
DescriptionTextBox.Font = Enum.Font.SourceSans
DescriptionTextBox.Text = ""
DescriptionTextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
DescriptionTextBox.TextSize = 14
DescriptionTextBox.TextStrokeTransparency = 0.65

local Commands = {}

function API:Tween(Obj, Prop, New, Time)
	if not Time then
		Time = .5
	end
	local TweenService = game:GetService("TweenService")
	local info = TweenInfo.new(
		Time, 
		Enum.EasingStyle.Quart, 
		Enum.EasingDirection.Out, 
		0, 
		false,
		0
	)
	local propertyTable = {
		[Prop] = New,
	}

	TweenService:Create(Obj, info, propertyTable):Play()
end

function API:Notify(Text,Dur)
	task.spawn(function()
		if not Dur then
			Dur = 1.5
		end
		local Notify = Instance.new("ScreenGui")
		local Frame_1 = Instance.new("Frame")
		local TextLabel = Instance.new("TextLabel")
		Notify.Parent = (game:GetService("CoreGui") or gethui())
		Notify.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		Frame_1.Parent = Notify
		Frame_1.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Frame_1.BackgroundTransparency=1
		Frame_1.BorderSizePixel = 0
		Frame_1.Position = UDim2.new(0, 0, 0.0500000007, 0)
		Frame_1.Size = UDim2.new(1, 0, 0.100000001, 0)
		TextLabel.Parent = Frame_1
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.TextTransparency =1
		TextLabel.Size = UDim2.new(1, 0, 1, 0)
		TextLabel.Font = Enum.Font.Highway
		TextLabel.Text = Text or "Text not found"
		TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.TextSize = 21.000
		API:Tween(Frame_1,"BackgroundTransparency",0.350,.5)
		API:Tween(TextLabel,"TextTransparency",0,.5)
		wait(Dur+.7)
		API:Tween(Frame_1,"BackgroundTransparency",1,.5)
		API:Tween(TextLabel,"TextTransparency",1,.5)
		wait(.7)
		Notify:Destroy()
	end)
	return
end

API:Notify("Panther Admin successfully loaded", 2)

function API:AddCommand(header, description, commandFunction, isHidden, extra, isPre, doNotLower, aliases, extraText)
    local CommandLabel = Instance.new("TextButton")
    CommandLabel.Name = header
    CommandLabel.Parent = isHidden and nil or CommandsList
    CommandLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    CommandLabel.Size = UDim2.new(1, 0, 0, 30)
    CommandLabel.Font = Enum.Font.SourceSans
    CommandLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
    CommandLabel.TextSize = 16
    CommandLabel.BackgroundTransparency = 0.4

    local CommandLabelCorner = Instance.new("UICorner")
    CommandLabelCorner.CornerRadius = UDim.new(0, 8)
    CommandLabelCorner.Parent = CommandLabel

    if isPre then
        CommandLabel.TextColor3 = Color3.new(1, 0.796, 0.066)
    end

    Commands[doNotLower and header or header:lower()] = commandFunction

    -- Store aliases
    if aliases then
        for _, alias in pairs(aliases) do
            Commands[doNotLower and alias or alias:lower()] = commandFunction
        end
    end

    -- Format alias text using "/" instead of ","
    local aliasText = aliases and (" / " .. table.concat(aliases, " / ")) or ""
    CommandLabel.Text = header .. aliasText .. (extraText and (" " .. extraText) or "")

    CommandLabel.MouseButton1Click:Connect(function()
        CommandBar.Text = header
        CommandBar:CaptureFocus()
    end)

    CommandLabel.MouseEnter:Connect(function()
        CommandLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        DescriptionTextBox.Text = description
        DescriptionTextBox.Visible = true
    end)

    CommandLabel.MouseLeave:Connect(function()
        CommandLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        DescriptionTextBox.Visible = false
    end)

    local function ExecuteCommand(text)
        local splitText = doNotLower and text:split(" ") or text:lower():split(" ")
        local commandKey = splitText[1]:lower()
        local args = {}
        for i = 2, #splitText do
            table.insert(args, splitText[i])
        end
        if Commands[commandKey] then
            local success, errorMessage = pcall(function()
                Commands[commandKey](args)
            end)
            if not success and errorMessage then
                warn("ERROR: " .. tostring(errorMessage))
            end
        else
            warn("Unknown command: " .. commandKey)
        end
    end

    CommandBar.FocusLost:Connect(function(enterPressed)
        if enterPressed then
            ExecuteCommand(CommandBar.Text)
            task.wait(0.04)
            CommandBar.Text = ""
        end
    end)
end

CommandBar.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local cmd = CommandBar.Text:lower()
        if Commands[cmd] then
            pcall(Commands[cmd], {})
        end
        CommandBar.Text = ""
    end
end)

SearchBar.Changed:Connect(function(property)
    if property:lower() == "text" then
        CommandsList.CanvasPosition = Vector2.new(0, 0)
        if #SearchBar.Text > 0 then
            for _, v in pairs(CommandsList:GetChildren()) do
                if v:IsA("TextButton") then
                    v.Visible = string.find(string.lower(v.Text), string.lower(SearchBar.Text)) ~= nil
                end
            end
        else
            for _, v in pairs(CommandsList:GetChildren()) do
                if v:IsA("TextButton") then
                    v.Visible = true
                end
            end
        end
    end
end)

MinimizeButton.MouseButton1Click:Connect(function()
    local isMinimized = MainFrame.Size.Y.Offset <= 40
    MainFrame:TweenSize(UDim2.new(0, 350, 0, isMinimized and 450 or 40), "Out", "Quad", 0, true)
    CommandBar.Visible = isMinimized
    SearchBar.Visible = isMinimized
    CommandsList.Visible = isMinimized
end)

CloseButton.MouseButton1Click:Connect(function()
    PantherAdmin_UI:Destroy()
end)

function API:MoveTo(targetCFrame)
    local Player = game:GetService("Players").LocalPlayer.Character
    if not Player or not Player:FindFirstChild("HumanoidRootPart") then return end

    local currentRotation = Player.HumanoidRootPart.CFrame.Rotation -- Extract rotation only

    for i = 1, 3 do
        Player:WaitForChild("Humanoid").Sit = false
        Player:SetPrimaryPartCFrame(targetCFrame * currentRotation) -- Maintain rotation
        game:GetService("RunService").Stepped:Wait()
    end
end

-- Criminal Base Teleport Command
API:AddCommand("crimbase", "Teleports you to the criminal base", function(args)
	API:MoveTo(CFrame.new(-860.533, 95.476, 2099.548))
API:Notify("Succesfully teleported to the criminal base")
end, false, nil, nil, nil, {"base", "cb"})

API:AddCommand("nspawn", "Teleports you to the neutral spawn", function(args)
	API:MoveTo(CFrame.new(879, 29, 2349))
end, false, nil, nil, nil, nil)

API:AddCommand("office", "Teleports you to the secret office", function(args)
	API:MoveTo(CFrame.new(700, 101, 2357))
end, false, nil, nil, nil, nil)

API:AddCommand("tunnel", "Teleports you to the tunnel", function(args)
	API:MoveTo(CFrame.new(527, 90, 2575))
end, false, nil, nil, nil, {"tunl", "tnl"})

API:AddCommand("fridge", "Teleports you to the refrigerator", function(args)
	local Player = game:GetService("Players").LocalPlayer.Character
    if not Player or not Player:FindFirstChild("HumanoidRootPart") then return end

    for i = 1, 3 do
        Player:WaitForChild("Humanoid").Sit = false
        Player:SetPrimaryPartCFrame(CFrame.new(787, 102, 2250.5))
        game:GetService("RunService").Stepped:Wait()
    end
end, false, nil, nil, nil, {"freezer"})

-- GoTo Command with Aliases and Random Player Teleport
API:AddCommand("goto", "Teleports to a player", function(args)
    if not args[1] then return end
    local targetName = args[1]:lower()
    local targetPlayer = nil

        -- Search for a player with a matching name
        for _, player in pairs(game.Players:GetPlayers()) do
            if string.lower(player.Name):sub(1, #targetName) == targetName 
            or string.lower(player.DisplayName):sub(1, #targetName) == targetName then
                targetPlayer = player
                break
            end
        end

    -- Teleport if the player is found
    if targetPlayer and targetPlayer.Character and targetPlayer.Character.PrimaryPart then
        local Player = game.Players.LocalPlayer
        local Amount = 3

        if Player.PlayerGui:FindFirstChild("Home") and 
           Player.PlayerGui.Home:FindFirstChild("hud") and
           Player.PlayerGui.Home.hud:FindFirstChild("Topbar") and
           Player.PlayerGui.Home.hud.Topbar:FindFirstChild("titleBar") and
           Player.PlayerGui.Home.hud.Topbar.titleBar:FindFirstChild("Title") then

            local titleText = Player.PlayerGui.Home.hud.Topbar.titleBar.Title.Text:lower()
            if titleText == "lights out" or titleText == "lightsout" then
                Amount = 5
            end
        end

        for i = 1, Amount do
            Player.Character:WaitForChild("Humanoid").Sit = false
            Player.Character:WaitForChild("HumanoidRootPart").CFrame = 
                targetPlayer.Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(0, 3, 2.5)
            game:GetService("RunService").Stepped:Wait()
        end
    else
        print("Error: Player not found or character invalid.")
    end
end, false, nil, nil, nil, {"to"}, "[player]")

function API:Bring(Target, TeleportTo)
    if not TeleportTo then
        TeleportTo = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
    end
    local CarSelected = nil
    local Seat = nil
    local Attempts = 0
    
    for i, v in pairs(game:GetService("Workspace").CarContainer:GetChildren()) do
        if v then
            if v:WaitForChild("Body"):WaitForChild("VehicleSeat").Occupant == nil then
                CarSelected = v
            end
        end
    end

    if not CarSelected then
        coroutine.wrap(function()
            if not CarSelected then
                CarSelected = game:GetService("Workspace").CarContainer.ChildAdded:Wait()
            end
        end)()

        game:GetService("Players").LocalPlayer.Character:SetPrimaryPartCFrame(game:GetService("Workspace").Prison_ITEMS.buttons:GetChildren()[7]["Car Spawner"].CFrame * CFrame.new(0, 0.5, 0))
        wait(0.23)

        repeat task.wait()
            task.spawn(function()
                workspace.Remote.ItemHandler:InvokeServer(game:GetService("Workspace").Prison_ITEMS.buttons:GetChildren()[7]["Car Spawner"])
            end)
        until CarSelected
    end

    repeat game:GetService("RunService").RenderStepped:Wait() until CarSelected ~= nil

    if CarSelected then
        CarSelected:WaitForChild("Body"):WaitForChild("VehicleSeat")
        CarSelected.PrimaryPart = CarSelected.Body.VehicleSeat
        Seat = CarSelected.Body.VehicleSeat
        CarSelected:SetPrimaryPartCFrame(game:GetService("Players").LocalPlayer.Character:GetPrimaryPartCFrame())
        
        repeat task.wait()
            Seat:Sit(game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"))
        until game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").Sit == true

        repeat game:GetService("RunService").RenderStepped:Wait()
            Attempts = Attempts + 1
            if not Target.Character or Target.Character:FindFirstChildOfClass("Humanoid").Health < 1 then
                break
            end
            CarSelected:SetPrimaryPartCFrame(Target.Character:GetPrimaryPartCFrame() * CFrame.new(0, -3, -5))
        until Target.Character:FindFirstChildOfClass("Humanoid").Sit == true or Attempts > 500

        for i = 1, 10 do
            CarSelected:SetPrimaryPartCFrame(TeleportTo)
	    game:GetService("RunService").Stepped:Wait()
        end
    end
end

API:AddCommand("bring", "Brings a player to you", function(args)
    if not args[1] then return end
local targetName = args[1]:lower()
local targetPlayer = nil

    for _, player in pairs(game.Players:GetPlayers()) do
        if string.lower(player.Name):sub(1, #targetName) == targetName 
        or string.lower(player.DisplayName):sub(1, #targetName) == targetName then
            targetPlayer = player
            break
        end
    end

if targetPlayer and targetPlayer.Character and targetPlayer.Character.PrimaryPart then
    local TeleportTo = game:GetService("Players").LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
    API:Bring(targetPlayer, TeleportTo)
else
    print("Error: Player not found or character invalid.")
end
end, false, nil, nil, nil, {"tp"}, "[player]")

API:AddCommand("spampunch", "You can spam the punch button", function(args)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Player = game:GetService("Players").LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local script = Character:WaitForChild("ClientInputHandler")
local cs = {
    isFighting = false;
}

-- Function to simulate punching
local function throwPunch_upvr(arg1, arg2)
    local Position = Character.HumanoidRootPart.CFrame  -- Use HumanoidRootPart for accurate positioning
    local a = Position * CFrame.new(0, 0, -1)  -- Adjust punch direction (forward)
    
    local punchSound = Character.Head:FindFirstChild("punchSound") -- Find punch sound under Head
    if not punchSound then return end  -- Ensure sound exists
    
    local Part = Instance.new("Part", workspace)
    Part.Transparency = 1
    Part.CanCollide = false
    Part.CFrame = a
    
    -- Detects collision and triggers the punch event
    local p
    p = Part.Touched:Connect(function(h)
        if h and h.Parent and h.Parent:FindFirstChildOfClass("Humanoid") then
            local Target = game:GetService("Players"):FindFirstChild(h.Parent.Name)
            if Target and Target ~= Player then
                -- Trigger melee event and play punch sound
                task.spawn(function()
                    game.ReplicatedStorage["meleeEvent"]:FireServer(Target)
                    ReplicatedStorage.SoundEvent:FireServer(punchSound, Character.Head)
                    punchSound:Play()
                end)
                
                -- Disconnect and clean up
                if p then
                    p:Disconnect()
                end
                Part:Destroy()
            end
        end
    end)
    
    -- Cleanup part after a delay
    task.spawn(function()
        wait(1)
        if Part then
            Part:Destroy()
            if p then
                p:Disconnect()
            end
        end
    end)
end

-- Load animations for left and right punches
local any_LoadAnimation_result1_upvr_3 = Humanoid:LoadAnimation(script.fight_left)
local any_LoadAnimation_result1_upvr_7 = Humanoid:LoadAnimation(script.fight_right)
local var40_upvw = false

-- Fight function to trigger punching
local function fight_upvr()
    cs.isFighting = true
    any_LoadAnimation_result1_upvr_3:Stop()
    any_LoadAnimation_result1_upvr_7:Stop()

    if var40_upvw then
        any_LoadAnimation_result1_upvr_3:Play()
    else
        any_LoadAnimation_result1_upvr_7:Play()
    end
    
    var40_upvw = not var40_upvw
    Humanoid.JumpPower = 0
    delay(0.2, throwPunch_upvr)  -- Simulate punch after slight delay
    wait(0.6)  -- Wait for animation cooldown
    Humanoid.JumpPower = 50
    cs.isFighting = false
end

-- Trigger fight on mouse click
local UserInputService = game:GetService("UserInputService")
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.F then
        fight_upvr()  -- Trigger fight when left mouse button is pressed
    end
end)
end, false, nil, nil, nil, {"spunch", "fastpunch"})

API:AddCommand("jerk", "Start fucking yourself", function(args)
	workspace.Remote.ItemHandler:InvokeServer({Position=game:GetService("Players").LocalPlayer.Character.Head.Position,Parent=workspace.Prison_ITEMS.giver["AK-47"]})
	workspace.Remote.ItemHandler:InvokeServer({Position=game:GetService("Players").LocalPlayer.Character.Head.Position,Parent=workspace.Prison_ITEMS.giver["M9"]})
	workspace.Remote.ItemHandler:InvokeServer({Position=game:GetService("Players").LocalPlayer.Character.Head.Position,Parent=workspace.Prison_ITEMS.giver["Remington 870"]})
	wait(1)
	local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local character = Player.Character
local humanoid = character and character:FindFirstChild("Humanoid")
local animator = humanoid and humanoid:FindFirstChild("Animator")

for i,v in pairs(Player.Character:GetChildren()) do
				if v:IsA("Tool") then
					v.Parent = Player.Backpack
				end
			end
			Player.Backpack.M9.Parent = Player.Character
			Player.Backpack["AK-47"].Parent = Player.Character
			Player.Backpack["Remington 870"].Parent = Player.Character
			wait()
			Player.Character.M9.GripPos = Vector3.new(0.9, 2, 0)
			Player.Character["Remington 870"].GripPos = Vector3.new(0.9, 2, 2.1)
			Player.Character["AK-47"].GripPos = Vector3.new(0.9, 2, 6.4)
			wait()
			for i,v in pairs(Player.Character:GetChildren()) do
				if v:IsA("Tool") then
					v.Parent = Player.Backpack
				end
			end
			wait()
			Player.Backpack.M9.Parent = Player.Character
			Player.Backpack["AK-47"].Parent = Player.Character
			Player.Backpack["Remington 870"].Parent = Player.Character

if animator then
	while wait(0.1) do
    local jerkOff = game:GetService("ReplicatedStorage").Tools["Crude Knife"].Handle.Animation
    local track = animator:LoadAnimation(jerkOff)
    track:Play()
    track:AdjustSpeed(3)
	end
end
end, false, nil, nil, nil, {"masturbate"})

API:AddCommand("shield", "Give player someone's riot shield", function(args)
	for _, player in pairs(game:GetService("Players"):GetPlayers()) do
    local path = player.Backpack:FindFirstChild("Riot Shield")
    
    if path then
        for i = 1, 4 do
            Workspace.Remote.equipShield:FireServer(path)
        end
        path.Parent = game:GetService("Players").LocalPlayer.Backpack
    else
        print(player.Name .. " does not have a Riot Shield")
    end
end
end, false, nil, nil, nil, {"rshield"})

API:AddCommand("cuffs", "Gives player handcuffs", function(args)
	local player = game:GetService("Players").LocalPlayer
local backpack = player.Backpack

if not backpack:FindFirstChild("Handcuffs") then
    for _, targetPlayer in pairs(game:GetService("Players"):GetPlayers()) do
        if targetPlayer ~= player then
            local taser = targetPlayer.Backpack:FindFirstChild("Handcuffs")
            if taser then
                taser:Clone().Parent = backpack
                break
            end
        end
    end
end
end, false, nil, nil, nil, {"handcuffs"})
